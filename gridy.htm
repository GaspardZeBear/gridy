<!doctype html>
<html lang="fr">
<head>
<title>Grid</title>
<meta charset="utf-8">
<script>

window.onload= function() {
gridy = {
  step: parseInt(document.getElementById("iStep").value),
    stepProp:   {min:10,max:200},
  stepWidth: parseFloat(document.getElementById("iStepWidth").value), 
    stepWidthProp:{min:0.1,max:4},
  prop: parseInt(document.getElementById("iProp").value),
    propProp:   {min:2,max:8},
  propWidth: parseFloat(document.getElementById("iPropWidth").value),
    propWidthProp:{min:0.1,max:4},

  zoom: parseFloat(document.getElementById("iZoom").value),
    zoomProp:{min:0.1,max:4},
  imgUrl: "gridy.png",
  imgFile: "gridy.png",

  target: {},
  split: parseInt(document.getElementById("iSplit").value),
    splitProp:{min:2,max:12},
   
  get : function(pName) { return(this[pName]) ; },
  setInt : function(pName) { this[pName]=parseInt( document.getElementById(getIdFromPname(pName)).value)},
  setFloat : function(pName) { this[pName]=parseFloat(document.getElementById(getIdFromPname(pName)).value) },
  setString : function(pName) { this[pName]=document.getElementById(getIdFromPname(pName)).value },
  add : function(pName,val) {
         var r=gridy[pName] + val;
         gridy.setVal(pName,r);
  },
  setVal: function(pName,val) {
         var limits=gridy[pName+"Prop"];
         if ( val <= limits.max && val >= limits.min  ) {
           gridy[pName] = val ;
         }
         document.getElementById(getIdFromPname(pName)).value = val; 
         x(); 
  },
} ;

var c = document.getElementById("gridCanvas");
c.addEventListener("mousedown", doMouseDown, false);
c.addEventListener("mouseup", doMouseUp, false);
document.getElementById("iZoom").onchange= function() { gridy.setFloat("zoom");x()};
document.getElementById("iStep").onchange=function() { gridy.setInt("step");x()};
document.getElementById("iProp").onchange=function() { gridy.setInt("prop") ;x()};
document.getElementById("iSplit").onchange=function() { gridy.setInt("split") ;x()};
document.getElementById("iImgUrl").onchange=function() { gridy.setString("imgUrl") ;gridy.imgFile=gridy.imgUrl;x()};
document.getElementById("iStepWidth").onchange= function() { gridy.setFloat("stepWidth") ;x()};
document.getElementById("iPropWidth").onchange= function() { gridy.setFloat("propWidth") ;x()};
x();
}

function getIdFromPname(pName) {
var id= "i"+pName.charAt(0).toUpperCase() + pName.slice(1);
console.log("getId ... <" + pName + "> id=" + id);
return("i"+pName.charAt(0).toUpperCase() + pName.slice(1));
}

function doMouseDown(event) {
var pos = getMousePos(this, event);
gridy.target.x0=pos.x;
gridy.target.y0=pos.y;
gridy.target.x1=pos.x;
gridy.target.y1=pos.y;
}

function doMouseUp(event) {
var pos = getMousePos(this, event);
gridy.target.x2=pos.x;
gridy.target.y2=pos.y;
gridy.target.x1=Math.abs(gridy.target.x1+gridy.target.x2)/2;
gridy.target.y1=Math.abs(gridy.target.y1+gridy.target.y2)/2;
gridy.target.dialen= Math.sqrt(Math.pow(gridy.target.x1-gridy.target.x2,2) + Math.pow(gridy.target.y1-gridy.target.y2,2));
draw();
}

function getMousePos(canvas, e) {
   var rect = canvas.getBoundingClientRect();
    return {x: (e.clientX - rect.left)/gridy.get("zoom"), y: (e.clientY - rect.top)/gridy.get("zoom")};
}

function draw() {
  x();
}


function handleFile(f) {
  gridy.imgFile=f[0].name;
  x();
}

function x() {
     var img = new Image();
        img.onload = function() {
        loadCanvas(img);
        };
     img.src=gridy.imgFile ;
}

function drawTarget(ctx) {
    ctx.beginPath();
    ctx.moveTo(gridy.target.x0*gridy.get("zoom"),gridy.target.y0*gridy.get("zoom"));
    ctx.lineTo(gridy.target.x2*gridy.get("zoom"),gridy.target.y2*gridy.get("zoom"));
    ctx.arc(gridy.target.x1*gridy.get("zoom"),gridy.target.y1*gridy.get("zoom"),2,0,2*Math.PI);
    ctx.lineWidth = 2;
    ctx.strokeStyle = 'green';
    ctx.stroke();
    ctx.closePath();
    var d= gridy.target.dialen*gridy.get("zoom");
    inc=d/gridy.get("split");
    r=0;
    while ( r< d) {
      ctx.beginPath();
      r+=inc;
      ctx.arc(gridy.target.x1*gridy.get("zoom"),gridy.target.y1*gridy.get("zoom"),r,0,2*Math.PI);
      ctx.stroke();
      ctx.closePath();
    } 
}

function drawPropGrid(ctx,x0,y0,xsize,ysize,color,factor,width) {
    ctx.beginPath();
    ctx.font="20px Georgia";
    ctx.strokeStyle=color;
    if (width <= 0 ) {
      return;
    }
    ctx.lineWidth=width;
    xStep=Math.round(xsize/factor);
    yStep=Math.round(ysize/factor);
    for (i=0;i<xsize;i+=xStep) {
      ctx.moveTo(x0+i,y0);
      ctx.lineTo(x0+i,y0+ysize);
      ctx.stroke();
    }
    for (i=0;i<ysize;i+=yStep) {
      ctx.moveTo(x0,y0+i);
      ctx.lineTo(x0+xsize,y0+i);
      ctx.stroke();
    }
    ctx.closePath();
}


function drawConstantGrid(ctx,x0,y0,xsize,ysize,color,step,width) {
    ctx.beginPath();
    ctx.font="20px Georgia";
    ctx.strokeStyle=color;
    if (width <= 0 ) {
      return;
    }
    ctx.lineWidth=width;
    for (i=0;i<xsize;i+=step) {
      ctx.moveTo(x0+i,y0);
      ctx.lineTo(x0+i,y0+ysize);
      ctx.stroke();
    }
    for (i=0;i<ysize;i+=step) {
      ctx.moveTo(x0,y0+i);
      ctx.lineTo(x0+xsize,i+y0);
      ctx.stroke();
    }
    count=1;
    for (i=step;i<xsize;i+=step) {
      ctx.fillText(count,x0+i+step/2,y0+step/2);
      count++;
    }
    count=1;
    for (i=step;i<ysize;i+=step) {
      ctx.fillText(count,x0+step/2,y0+i+step/2);
      count++;
    }
    ctx.stroke();
    ctx.closePath();
}

function loadCanvas(img) {
    var c = document.getElementById("gridCanvas");
    c.width= img.width*gridy.get("zoom");
    c.height = img.height*gridy.get("zoom");
    xRatio= c.width/img.width;
    yRatio= c.height/img.height;
    ratio=xRatio;
    if ( yRatio < ratio)  {
       ratio=yRatio;
    }
    var ctx = c.getContext("2d");
    ctx.drawImage(img, 0, 0, img.width*ratio, img.height * ratio);
    drawConstantGrid(ctx,0,0,img.width*ratio, img.height * ratio,'black',gridy.step,gridy.stepWidth);
    drawConstantGrid(ctx,100, 100, 300,300,'blue',50,1);
    drawPropGrid(ctx,0,0,img.width*ratio, img.height * ratio,'red',gridy.prop,gridy.propWidth);
    drawTarget(ctx);
};

</script>

</head>
<body>
<table border>
<tr><td>
Local file<input type="file" accept=".jpg, .jpeg, .png" id="input" onchange="handleFile(this.files)">
<br/>Url <input type="text" id="iImgUrl">
</td></tr>
<tr><td>Zoom<input type="text" id="iZoom" value="1">
<input type="button" id=="zoomIncr" value="+" onClick="gridy.add('zoom',0.1)">
<input type="button" id="zoomDecr" value="-" onClick="gridy.add('zoom',-0.1)">
<br/>Split<input type="text" id="iSplit" value="4">
<input type="button" id=="splitIncr" value="+" onClick="gridy.add('split',1)">
<input type="button" id="splitDecr" value="-" onClick="gridy.add('split',-1)">
<br/>Step<input type="text" id="iStep" value="40">
<input type="button" id=="stepIncr" value="+" onClick="gridy.add('step',10)">
<input type="button" id="stepDecr" value="-" onClick="gridy.add('step',-10)">
stepWidth<input type="text" id="iStepWidth" value="1">
<input type="button" id=="widthStepIncr" value="+" onClick="gridy.add('stepWidth',(0.1)">
<input type="button" id="widthStepDecr" value="-" onClick="gridy.add('stepWidth',-0.1)">
<br/>
Proportion<input type="text" id="iProp" value="3">
<input type="button" id=="propIncr" value="+" onClick="gridy.add('prop',1)">
<input type="button" id="propDecr" value="-" onClick="gridy.add('prop',-1)">
propWidth<input type="text" id="iPropWidth" value="1">
<input type="button" id=="widthPropIncr" value="+" onClick="gridy.add('propWidth',0.1)">
<input type="button" id="widthPropDecr" value="-" onClick="gridy.add('propWidth',-0.1)">
</td></tr>
</table>
<table>
<tr><td><canvas id="gridCanvas"> </canvas></td></tr>
</table>
</body>
</html>
